// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumKycUserRoleDto {
  GUEST
  MASTER
  ADMIN
}

// Таблица пользователей
model User {
  // Уникальный идентификатор пользователя (UUID)
  id          String              @id @default(uuid())
  // Уникальный Telegram ID пользователя
  telegramId  Int                 @unique @map("telegram_id")
  // Роль пользователя в системе (гость, владелец ресторана, администратор)
  role        EnumKycUserRoleDto  
  // Список ресторанов, принадлежащих пользователю
  restaurants Restaurant[]       @relation("OwnerRestaurants") 
}

// Таблица ресторанов
model Restaurant {
  // Уникальный идентификатор ресторана (UUID)
  id          String   @id @default(uuid())
  // Название ресторана
  name        String
  // Владелец ресторана (пользователь)
  owner       User     @relation("OwnerRestaurants", fields: [ownerId], references: [id])
  // ID владельца ресторана (связь с таблицей User)
  ownerId     String
  // Флаг, одобрен ли ресторан модератором
  isApproved  Boolean @default(false) 
  // Дата создания ресторана (устанавливается автоматически)
  createdAt   DateTime @default(now())
  // Дата последнего обновления ресторана (автоматически обновляется при изменении записи)
  updatedAt   DateTime @updatedAt
}
